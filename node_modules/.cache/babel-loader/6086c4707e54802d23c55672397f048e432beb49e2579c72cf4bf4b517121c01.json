{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\janse\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\REACT\\\\SECRET_WORD\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n//Data\nimport { wordList } from \"./data/word\";\n\n//Components\nimport StartScreen from './components/StartScreen';\nimport Game from \"./components/Game\";\nimport End from \"./components/End\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 0,\n  name: \"start\"\n}, {\n  id: 1,\n  name: \"game\"\n}, {\n  id: 2,\n  name: \"end\"\n}];\nconst guessesQty = 3;\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [word] = useState(wordList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guessed, setGuessed] = useState(guessesQty);\n  const [score, setScore] = useState(0);\n  const pickWordAndCategory = useCallback(() => {\n    //pick a random category\n    const categories = Object.keys(word);\n    const category = categories[Math.floor(Math.random() * categories.length)];\n\n    //pick a random word\n    const words = word[category][Math.floor(Math.random() * word[category].length)];\n    return {\n      category,\n      words\n    };\n  }, [word]);\n\n  //start game\n  const startGame = useCallback(() => {\n    //clear all letters\n    clearLetterStates();\n\n    // choose a word\n    const {\n      category,\n      word\n    } = pickWordAndCategory();\n\n    // create an array of letters\n    let wordLetters = word.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n\n    //fill states\n    setPickedWord(word);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // pick word and pick category\n  //const {word, category } = pickWordAndCategory();\n\n  //process the letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    //check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    //push guessed letter or remove a guess \n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, letter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n    }\n    setGuessed(actualGuessed => actualGuessed - 1);\n  };\n\n  //restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuessed(guessesQty);\n    setGameStage(stages[0].name);\n  };\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n  useEffect(() => {\n    if (guessed === 0) {\n      //reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guessed]);\n\n  //check win condition\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n\n    //win condition\n    if (guessedLetters.length === uniqueLetters.length)\n      //add score\n      setScore(actualScore => actualScore += 100);\n    //restart  game with new word\n    startGame();\n  }, [guessedLetters, letters, startGame]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 31\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guessed: guessed,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(End, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"jvcjuRC2djy8u+GBjGiNgPccywI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordList","StartScreen","Game","End","jsxDEV","_jsxDEV","stages","id","name","guessesQty","App","_s","gameStage","setGameStage","word","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guessed","setGuessed","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","words","startGame","clearLetterStates","wordLetters","split","map","l","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuessed","retry","uniqueLetters","Set","actualScore","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/janse/OneDrive/Área de Trabalho/REACT/SECRET_WORD/secretword/src/App.js"],"sourcesContent":["//CSS\nimport './App.css';\n\n// React\nimport {useCallback, useEffect, useState} from \"react\";\n\n//Data\nimport {wordList} from \"./data/word\";\n\n\n//Components\nimport StartScreen from './components/StartScreen';\nimport Game from \"./components/Game\";\nimport End from \"./components/End\";\n\nconst stages = [\n  {id: 0, name: \"start\"},\n  {id: 1, name: \"game\"},\n  {id: 2, name: \"end\"},\n]\n\nconst guessesQty = 3\n\nfunction App() {\n\n    const [gameStage, setGameStage] = useState(stages[0].name);\n    const [word] = useState(wordList);\n\n    const [pickedWord, setPickedWord] = useState (\"\");\n    const [pickedCategory, setPickedCategory] = useState (\"\");\n    const [letters, setLetters] = useState([]);\n\n    const [guessedLetters, setGuessedLetters] = useState([])\n    const [wrongLetters, setWrongLetters] = useState ([])\n    const [guessed, setGuessed] = useState (guessesQty)\n    const [score, setScore] = useState (0)\n\n\n\n    const pickWordAndCategory = useCallback(() => {\n      //pick a random category\n      const categories = Object.keys(word);\n      const category = \n        categories[Math.floor(Math.random() * categories.length)]\n\n      //pick a random word\n      const words =\n         word[category][Math.floor(Math.random() * word[category].length)];\n\n\n      return {category, words}\n    }, [word]);\n\n    //start game\n    const startGame = useCallback(() => {\n      //clear all letters\n      clearLetterStates();\n\n      // choose a word\n      const { category, word } = pickWordAndCategory();\n\n      // create an array of letters\n      let wordLetters = word.split(\"\");\n\n      wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n      //fill states\n      setPickedWord(word)\n      setPickedCategory(category)\n      setLetters(wordLetters)\n      \n      setGameStage(stages[1].name);\n    },[pickWordAndCategory])\n\n    \n      // pick word and pick category\n      //const {word, category } = pickWordAndCategory();\n\n\n    //process the letter input\n    const verifyLetter = (letter) => {\n      const normalizedLetter = letter.toLowerCase();\n\n      //check if letter has already been utilized\n      if(guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter) ){\n      return;\n      }\n\n      //push guessed letter or remove a guess \n      if (letters.includes(normalizedLetter)){ \n        setGuessedLetters((actualGuessedLetters) => [...actualGuessedLetters, letter,]);\n      } else {\n        setWrongLetters((actualWrongLetters) => [...actualWrongLetters, normalizedLetter])\n      }\n\n      setGuessed((actualGuessed) => actualGuessed - 1);\n\n    };\n\n\n//restarts the game\nconst retry = () => {\n\n  setScore(0)\n  setGuessed(guessesQty)\n  setGameStage(stages[0].name);\n}\n\n \nconst clearLetterStates = () => {\n  setGuessedLetters([]);\n  setWrongLetters([]);\n};\n\n\nuseEffect(() => {\nif(guessed === 0) {\n//reset all states\nclearLetterStates()\n\nsetGameStage(stages[2].name)\n}\n}, [guessed])\n\n//check win condition\nuseEffect(() => {\nconst uniqueLetters = [...new Set(letters)];\n\n//win condition\nif(guessedLetters.length === uniqueLetters.length)\n//add score\nsetScore((actualScore) => actualScore += 100)\n//restart  game with new word\nstartGame();\n\n}, [guessedLetters, letters, startGame]) ;\n\n  return (\n    <div className=\"App\">\n   {gameStage === \"start\" &&  < StartScreen startGame={startGame}/>}\n   {gameStage === \"game\" && ( \n    < Game \n        verifyLetter={verifyLetter}\n        pickedWord={pickedWord}  \n        pickedCategory={pickedCategory} \n        letters={letters} \n        guessedLetters={guessedLetters} \n        wrongLetters={wrongLetters} \n        guessed={guessed} \n        score={score}\n        />)}\n\n   {gameStage === \"end\" &&  < End retry={retry} score={score}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}