{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\janse\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\REACT\\\\SECRET_WORD\\\\secretword\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n//CSS\nimport './App.css';\n\n// React\nimport { useCallback, useEffect, useState } from \"react\";\n\n//Data\nimport { wordList } from \"./data/word\";\n\n//Components\nimport StartScreen from './components/StartScreen';\nimport Game from \"./components/Game\";\nimport End from \"./components/End\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst stages = [{\n  id: 0,\n  name: \"start\"\n}, {\n  id: 1,\n  name: \"game\"\n}, {\n  id: 2,\n  name: \"end\"\n}];\nconst guessesQty = 3;\nfunction App() {\n  _s();\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [word] = useState(wordList);\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guessed, setGuessed] = useState(guessesQty);\n  const [score, setScore] = useState(0);\n  const pickWordAndCategory = () => {\n    //pick a random category\n    const categories = Object.keys(word);\n    const category = categories[Math.floor(Math.random() * categories.length)];\n    console.log(category);\n\n    //pick a random word\n    const words = word[category][Math.floor(Math.random() * word[category].length)];\n    console.log(word);\n    return {\n      words,\n      category\n    };\n  };\n\n  //start game\n  const startGame = () => {\n    // pick word and pick category\n    const {\n      words,\n      category\n    } = pickWordAndCategory();\n\n    // create an array of letters\n    let wordLetters = words.split(\"\");\n    wordLetters = wordLetters.map(l => l.toLowerCase());\n    console.log(words, category);\n    console.log(wordLetters);\n\n    //fill states\n    setPickedWord(words);\n    setPickedCategory(category);\n    setLetters(wordLetters);\n    setGameStage(stages[1].name);\n  };\n\n  //process the letter input\n  const verifyLetter = letter => {\n    const normalizedLetter = letter.toLowerCase();\n\n    //check if letter has already been utilized\n    if (guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter)) {\n      return;\n    }\n\n    //push guessed letter or remove a guess \n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters(actualGuessedLetters => [...actualGuessedLetters, normalizedLetter]);\n    } else {\n      setWrongLetters(actualWrongLetters => [...actualWrongLetters, normalizedLetter]);\n    }\n    setGuessed(actualGuessed => actualGuessed - 1);\n  };\n  const clearLetterStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n  useEffect(() => {\n    if (guessed <= 0) {\n      //reset all states\n      clearLetterStates();\n      setGameStage(stages[2].name);\n    }\n  }, [guessed]);\n\n  //check win condition\n  useEffect(() => {\n    const uniqueLetters = [];\n  }, [guessedLetters]);\n\n  //restarts the game\n  const retry = () => {\n    setScore(0);\n    setGuessed(guessesQty);\n    setGameStage(stages[0].name);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [gameStage === \"start\" && /*#__PURE__*/_jsxDEV(StartScreen, {\n      startGame: startGame\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 31\n    }, this), gameStage === \"game\" && /*#__PURE__*/_jsxDEV(Game, {\n      verifyLetter: verifyLetter,\n      pickedWord: pickedWord,\n      pickedCategory: pickedCategory,\n      letters: letters,\n      guessedLetters: guessedLetters,\n      wrongLetters: wrongLetters,\n      guessed: guessed,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 5\n    }, this), gameStage === \"end\" && /*#__PURE__*/_jsxDEV(End, {\n      retry: retry,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"PAbnSpo0OJNojHehF9BIinLAE9k=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useEffect","useState","wordList","StartScreen","Game","End","jsxDEV","_jsxDEV","stages","id","name","guessesQty","App","_s","gameStage","setGameStage","word","pickedWord","setPickedWord","pickedCategory","setPickedCategory","letters","setLetters","guessedLetters","setGuessedLetters","wrongLetters","setWrongLetters","guessed","setGuessed","score","setScore","pickWordAndCategory","categories","Object","keys","category","Math","floor","random","length","console","log","words","startGame","wordLetters","split","map","l","toLowerCase","verifyLetter","letter","normalizedLetter","includes","actualGuessedLetters","actualWrongLetters","actualGuessed","clearLetterStates","uniqueLetters","retry","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/janse/OneDrive/Área de Trabalho/REACT/SECRET_WORD/secretword/src/App.js"],"sourcesContent":["//CSS\nimport './App.css';\n\n// React\nimport {useCallback, useEffect, useState} from \"react\";\n\n//Data\nimport {wordList} from \"./data/word\";\n\n\n//Components\nimport StartScreen from './components/StartScreen';\nimport Game from \"./components/Game\";\nimport End from \"./components/End\";\n\nconst stages = [\n  {id: 0, name: \"start\"},\n  {id: 1, name: \"game\"},\n  {id: 2, name: \"end\"},\n]\n\nconst guessesQty = 3\n\nfunction App() {\n\n    const [gameStage, setGameStage] = useState(stages[0].name);\n    const [word] = useState(wordList)\n\n    const [pickedWord, setPickedWord] = useState (\"\");\n    const [pickedCategory, setPickedCategory] = useState (\"\"\n    );\n    const [letters, setLetters] = useState([]);\n\n    const [guessedLetters, setGuessedLetters] = useState([])\n    const [wrongLetters, setWrongLetters] = useState ([])\n    const [guessed, setGuessed] = useState (guessesQty)\n    const [score, setScore] = useState (0)\n\n\n\n    const pickWordAndCategory = () => {\n      //pick a random category\n      const categories = Object.keys(word);\n      const category = \n        categories[Math.floor(Math.random() * categories.length)]\n\n      console.log(category)\n\n      //pick a random word\n      const words =\n         word[category][Math.floor(Math.random() * word[category].length)]\n\n      console.log(word)\n\n      return {words, category}\n    }\n\n    //start game\n    const startGame = () => {\n// pick word and pick category\n      const {words, category } = pickWordAndCategory();\n\n      // create an array of letters\n      let wordLetters = words.split(\"\")\n\n      wordLetters = wordLetters.map((l) => l.toLowerCase())\n\n      console.log(words, category)\n      console.log(wordLetters)\n\n      //fill states\n      setPickedWord(words)\n      setPickedCategory(category)\n      setLetters(wordLetters)\n\n      setGameStage(stages[1].name);\n    }\n\n    //process the letter input\n    const verifyLetter = (letter) =>{\n      const normalizedLetter = letter.toLowerCase();\n\n      //check if letter has already been utilized\n      if(guessedLetters.includes(normalizedLetter) || wrongLetters.includes(normalizedLetter) ){\n        return;\n      }\n\n      //push guessed letter or remove a guess \n      if (letters.includes(normalizedLetter)){ \n        setGuessedLetters((actualGuessedLetters) => [...actualGuessedLetters, normalizedLetter])\n\n      } else {\n        setWrongLetters((actualWrongLetters) => [...actualWrongLetters, normalizedLetter])\n      }\n\n      setGuessed((actualGuessed) => actualGuessed - 1);\n\n    };\n\n    const clearLetterStates = () => {\n      setGuessedLetters([]);\n      setWrongLetters([]);\n    };\n\n\n\n    useEffect(() => {\nif(guessed <= 0) {\n//reset all states\n  clearLetterStates()\n    \nsetGameStage(stages[2].name)\n  }\n    }, [guessed])\n\n//check win condition\nuseEffect (() => {\n\nconst uniqueLetters = []\n\n\n}, [guessedLetters]) \n\n\n\n//restarts the game\nconst retry = () => {\n\n  setScore(0)\n  setGuessed(guessesQty)\n  setGameStage(stages[0].name);\n}\n\n  return (\n    <div className=\"App\">\n   {gameStage === \"start\" &&  < StartScreen startGame={startGame}/>}\n   {gameStage === \"game\" && ( \n    < Game \n        verifyLetter={verifyLetter}\n        pickedWord={pickedWord}  \n        pickedCategory={pickedCategory} \n        letters={letters} \n        guessedLetters={guessedLetters} \n        wrongLetters={wrongLetters} \n        guessed={guessed} \n        score={score}\n        />)}\n\n   {gameStage === \"end\" &&  < End retry={retry} score={score}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}