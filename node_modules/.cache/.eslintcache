[{"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\index.js":"1","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\reportWebVitals.js":"2","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\App.js":"3","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\StartScreen.js":"4","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\Game.js":"5","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\data\\words.js":"6","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\GameOver.js":"7"},{"size":535,"mtime":1690236248992,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1690236249967,"results":"10","hashOfConfig":"9"},{"size":4048,"mtime":1690504618425,"results":"11","hashOfConfig":"9"},{"size":416,"mtime":1691716060228,"results":"12","hashOfConfig":"9"},{"size":1822,"mtime":1691723174493,"results":"13","hashOfConfig":"9"},{"size":585,"mtime":1692110855450,"results":"14","hashOfConfig":"9"},{"size":304,"mtime":1691721773415,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"rg9fss",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\index.js",[],[],"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\reportWebVitals.js",[],[],"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\App.js",["38"],[],"import { useCallback, useEffect, useState } from \"react\";\n\n// components\nimport StartScreen from \"./components/StartScreen\";\nimport Game from \"./components/Game\";\nimport GameOver from \"./components/GameOver\";\n\n// styles\nimport \"./App.css\";\n\n// data\nimport { wordsList } from \"./data/words\";\n\nconst stages = [\n  { id: 0, name: \"start\" },\n  { id: 1, name: \"game\" },\n  { id: 2, name: \"end\" },\n];\n\nfunction App() {\n  const [gameStage, setGameStage] = useState(stages[0].name);\n  const [words] = useState(wordsList);\n\n  const [pickedWord, setPickedWord] = useState(\"\");\n  const [pickedCategory, setPickedCategory] = useState(\"\");\n  const [letters, setLetters] = useState([]);\n  \n  const [guessedLetters, setGuessedLetters] = useState([]);\n  const [wrongLetters, setWrongLetters] = useState([]);\n  const [guessed, setGuessed] = useState(3);\n  const [score, setScore] = useState(0);\n\n\n  const pickWordAndCategory = useCallback(() => {\n    // pick a random category\n    const categories = Object.keys(words);\n    const category =\n      categories[Math.floor(Math.random() * Object.keys(categories).length)];\n\n    // pick a random word\n    const word =\n      words[category][Math.floor(Math.random() * words[category].length)];\n\n    console.log(category, word);\n\n    return { category, word };\n  }, [words]);\n\n  // start the game\n  const startGame = useCallback(() => {\n    // clear all letters\n    clearLettersStates();\n\n    // choose a word\n    const { category, word } = pickWordAndCategory();\n\n    console.log(category, word);\n\n    let wordLetters = word.split(\"\");\n\n    wordLetters = wordLetters.map((l) => l.toLowerCase());\n\n    // console.log(category, word);\n\n    setPickedCategory(category);\n    setPickedWord(word);\n    setLetters(wordLetters);\n\n    setGameStage(stages[1].name);\n  }, [pickWordAndCategory]);\n\n  // process letter input\n  const verifyLetter = (letter) => {\n    const normalizedLetter = letter.toLowerCase();\n\n    // check if letter has already been utilized\n    if (\n      guessedLetters.includes(normalizedLetter) ||\n      wrongLetters.includes(normalizedLetter)\n    ) {\n      return;\n    }\n\n    // push guessed letter or remove a chance\n    if (letters.includes(normalizedLetter)) {\n      setGuessedLetters((actualGuessedLetters) => [\n        ...actualGuessedLetters,\n        letter,\n      ]);\n    } else {\n      setWrongLetters((actualWrongLetters) => [\n        ...actualWrongLetters,\n        normalizedLetter,\n      ]);\n\n      setGuessed((actualGuessed) => actualGuessed - 1);\n    }\n  };\n\n  console.log(wrongLetters);\n\n  // restart the game\n  const retry = () => {\n    setScore(0);\n    setGuessed(3);\n    setGameStage(stages[0].name);\n  };\n\n  // clear letters state\n  const clearLettersStates = () => {\n    setGuessedLetters([]);\n    setWrongLetters([]);\n  };\n\n  // check if guesses ended\n  useEffect(() => {\n    if (guessed === 0) {\n      // game over and reset all states\n      clearLettersStates();\n\n      setGameStage(stages[2].name);\n    }\n  }, [guessed]);\n\n  // check win condition\n  useEffect(() => {\n    const uniqueLetters = [...new Set(letters)];\n\n    // win condition\n    if (guessedLetters.length === uniqueLetters.length && gameStage === stages[1].name) {\n\n      // add score\n      setScore((actualScore) => (actualScore += 100));\n      setGuessed([3])\n   \n      // restart game with new word - acertando a palavra\n             setTimeout(function () {\n              startGame();\n            }, 1000);\n    }\n  }, [guessedLetters, letters, startGame]);\n\n\n\n  return (\n    <div className=\"App\">\n      {gameStage === \"start\" && <StartScreen startGame={startGame} />}\n      {gameStage === \"game\" && (\n        <Game\n          verifyLetter={verifyLetter}\n          pickedWord={pickedWord}\n          pickedCategory={pickedCategory}\n          letters={letters}\n          guessedLetters={guessedLetters}\n          wrongLetters={wrongLetters}\n          guessed={guessed}\n          score={score}\n        />\n      )}\n      {gameStage === \"end\" && <GameOver retry={retry} score={score} />}\n    </div>\n  );\n}\n\nexport default App;","C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\StartScreen.js",[],[],"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\Game.js",[],[],"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\data\\words.js",[],[],"C:\\Users\\janse\\OneDrive\\Área de Trabalho\\REACT\\SECRET_WORD\\secretword\\src\\components\\GameOver.js",[],[],{"ruleId":"39","severity":1,"message":"40","line":141,"column":6,"nodeType":"41","endLine":141,"endColumn":42,"suggestions":"42"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'gameStage'. Either include it or remove the dependency array.","ArrayExpression",["43"],{"desc":"44","fix":"45"},"Update the dependencies array to be: [gameStage, guessedLetters, letters, startGame]",{"range":"46","text":"47"},[3447,3483],"[gameStage, guessedLetters, letters, startGame]"]